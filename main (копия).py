import os
import datetime
import logging
from aiogram import Dispatcher, Bot, executor, types
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO,
                    filename='logfile.log',
                    format='%(asctime)s: %(message)s',
                    datefmt='%H:%M:%S')

# TOKEN = os.getenv('TOKEN')
TOKEN = '5522470947:AAH8E3dr59tGtaxt1iw5nH0Rvyg5z0BM8gY'
ADMIN='1081686891'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
couch = [
    [
        types.KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É"),
        types.KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Ç—É—Ç"),
    ],
]
keyboard1 = types.ReplyKeyboardMarkup(
        keyboard=couch,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
    )
# kb = [
#     [
#         types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç—Ä—ç–∫"),
#         types.KeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É"),
#         types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é"),
#         types.KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—É—á—É")
#     ],
# ]
# keyboard = types.ReplyKeyboardMarkup(
#     keyboard=kb,
#     resize_keyboard=True,
#     # input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
# )
button1 = KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ç—Ä—ç–∫')
button2 = KeyboardButton('–°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É')
button3 = KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é')
button4 = KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—É—á—É')

keyboard = ReplyKeyboardMarkup().row(
    button1, button2
)
keyboard.row(button3, button4)

@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text == "–í –Ω–∞—á–∞–ª–æ")
async def starter(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_photo(message.from_id, photo=open('static/start.png', 'rb'))
    await bot.send_message(message.from_id, text="–ß—Ç–æ–±—ã —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è, –≤ –ø–æ–º–æ—â—å –∫–Ω–æ–ø–∫–∏ üòâ")
    await message.answer("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)


######################################## Main Menu ########################################

@dp.message_handler(lambda message: message.text == "–°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, f'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –°–µ–π—á–∞—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª—ã üèÉüèª')
    job = 'static/job.pdf'
    negotiation = 'static/negotiation.pdf'
    await bot.send_document(message.from_id, document=open(job, 'rb'))
    await bot.send_document(message.from_id, document=open(negotiation, 'rb'))
    await bot.send_message(message.from_id, text="üö®üö®üö® *[–°—Å—ã–ª–∫–∞ –Ω–∞ miro](https://miro.com/app/board/uXjVP4s6vpQ=/)*", parse_mode='MarkdownV2')
    await message.answer("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?", reply_markup=keyboard)



@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é")
async def motivation(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, "–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –í–æ—Ç —Ç–µ–±–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∏–Ω–≥–≤–∏–Ω üêß")
    await bot.send_animation(message.from_id, animation='https://media2.giphy.com/media/OZbGrdp7FiDiE/giphy.gif')
    await message.answer("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?", reply_markup=keyboard)



@dp.message_handler(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—É—á—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_photo(message.from_id, photo=open('static/hr.jpg', 'rb'), 
    caption='–ù–∞–¥—è –ö—Ä—É—Ç–∏–∫–æ–≤–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–Ω–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç!')
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=keyboard1)

@dp.message_handler(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, "–ù–∞–¥—è –ö—Ä—É—Ç–∏–∫–æ–≤–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–Ω–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç!")
    await bot.send_message(message.from_id, text="‚ù§Ô∏è *[–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ù–∞–¥–∏](https://t.me/krutikovanad)* ‚ù§Ô∏è", parse_mode='MarkdownV2')
    await message.answer("–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å —Ç—É—Ç")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.username} {message.from_user.full_name}: {message.text[-1]}')
    await bot.send_message(message.from_id, "–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ù–∞–¥–µ –Ω–∞–ø–∏—à–∏ /to_coach –∏ –¥–∞–ª–µ–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    # await message.answer("–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ù–∞–¥–µ –Ω–∞–ø–∏—à–∏ /to_coach –∏ –¥–∞–ª–µ–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=keyboard1)
    # f = open('logfile.log')

@dp.message_handler(commands=['to_coach'])
async def any_message(message: types.Message):
    if len(message.text)>10:
        logging.info(f'{message.from_user.full_name}: {message.text}')
        now = datetime.datetime.now()
        time = now.strftime("%d-%m-%Y %H:%M")
        text=f'@{message.from_user.username} –≤ {time} –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º: {message.text[10:]} '
        await bot.send_message(chat_id = '-1001636312840', text=text)
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏–ª", reply_markup=keyboard)

    else:
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ :( –¢—ã –∑–∞–±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç", reply_markup=keyboard)
        await bot.send_message(message.from_id, '–î–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç—å —Ç–∞–∫: "/to_coach –ü—Ä–∏–≤–µ—Ç!"')
    

start_text = "–¢–µ—Å—Ç"
@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —Ç—Ä—ç–∫")
async def track(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    start_keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º", callback_data="negotiation"),
        types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã", callback_data="job")
    )
    await message.answer(f"–ö–∞–∫–æ–π —Ç—Ä—ç–∫ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?\n\n", parse_mode="HTML", reply_markup=start_keyboard)





######################################## Track 1 ########################################

@dp.callback_query_handler(text="negotiation")
async def negotiations(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next1")
    )
    await query.message.edit_text(f'üèÅ –í–∞–º –∑–≤–æ–Ω–∏—Ç/–ø–∏—à–µ—Ç HR  –∏ —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –æ—Ñ—Ñ–µ—Ä! ‚òéÔ∏è\n\n', parse_mode="HTML", reply_markup=keyboard1)


@dp.callback_query_handler(text="next1")
async def negotiations1(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="negotiation"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next2"),
    )
    await query.message.edit_text(f'üìù –ó–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ, —á—Ç–æ HR —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É/—Å—Ä–∞–≤–Ω–∏—Ç–µ '
                                  '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –≤–∞–∫–∞–Ω—Å–∏–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç '
                                  '–Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –≤ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç–æ, —á—Ç–æ '
                                  '–æ–∑–≤—É—á–∏–ª/–Ω–∞–ø–∏—Å–∞–ª  HR  –∏–º–µ–µ—Ç –±–æ–ª—å—à—É—é —Å–∏–ª—É.\n\n', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="next2")
async def negotiations2(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next1"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next3"),
    )
    await query.message.edit_text(f'‚õîÔ∏è –ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å—Ä–∞–∑—É –∂–µ <i>"–¥–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω"</i>, '
                                  '–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã—Å–ª–∞—Ç—å –æ—Ñ—Ñ–µ—Ä –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ, '
                                  '—á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ '
                                  '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n\n', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="next3")
async def negotiations3(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next2"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next4"),
        types.InlineKeyboardButton(text="–í–∞–∂–Ω–æ ‚ùóÔ∏è", callback_data="next4_alt"),
    )
    await query.message.edit_text(f'üíå –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ñ—Ñ–µ—Ä (–æ–±—ã—á–Ω–æ –ø–æ –∏–º–µ–π–ª—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º)\n\n', parse_mode="HTML", reply_markup=keyboard1)

import html
@dp.callback_query_handler(text="next4_alt")
async def negotiations4(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next3"),
    )
    text1 = f'üåü –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ñ—Ñ–µ—Ä - –¥–ª—è "–ø–æ–¥–Ω—è—Ç–∏—è" —Å–≤–æ–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É –¥—Ä—É–≥–∏—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º –∫–æ–º–ø–∞–Ω–∏—è–º, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∂–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º (–æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–º, –≤ –∫–æ—Ç–æ—Ä—ã–µ –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ), —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ñ—Ñ–µ—Ä:'
    text2 = f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <u>–∏–º—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞</u>, \n\n–•–æ—Ç–µ–ª(–∞) –±—ã —Å–¥–µ–ª–∞—Ç—å –∞–ø–¥–µ–π—Ç –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞ - —è –Ω–∞ –¥–Ω—è—Ö  –ø–æ–ª—É—á–∏–ª(–∞) –æ—Ñ—Ñ–µ—Ä, –æ–¥–Ω–∞–∫–æ –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –º–µ–Ω—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –∏ —è –±—ã —Ö–æ—Ç–µ–ª(–∞) –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —ç—Ç–∞–ø—ã/–ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –¥–æ <u>(—Å–≤–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)</u> –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ –º–æ–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–µ?'
    text3 = f'–°–æ–æ–±—â–∞—Ç—å –æ—Ç –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ñ—Ñ–µ—Ä –∏ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É –Ω–µ –Ω—É–∂–Ω–æ.'
    await query.message.edit_text(f'{text1}\n\n<i>{text2}</i>\n\n{text3}\n\n', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="next4")
async def negotiations5(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next3"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next5"),
        types.InlineKeyboardButton(text="–í–∞–∂–Ω–æ ‚ùóÔ∏è", callback_data="next5_alt"),
    )
    text1 = f'‚è± –°–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –æ–±–¥—É–º–∞—Ç—å –∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∑–æ–≤–∏—Ç–µ —Å—Ä–æ–∫, –∫–æ–≥–¥–∞ –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º (–≤ –∏–¥–µ–∞–ª–µ –Ω–µ –±–æ–ª—å—à–µ 3-4 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π). –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –æ—Ñ—Ñ–µ—Ä —Å—Ä–∞–∑—É –∂–µ —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä –æ—Ç –ª—é–±–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –í–°–ï–ì–î–ê –º–∏–Ω–∏–º–∞–ª–µ–Ω –ø–æ —Å—É–º–º–µ, –æ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ. –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ  –∑–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É–º–º—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –æ–Ω —Å–∞–º —Å–µ–±—è –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç.'
    text2 = f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <u>–∏–º—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞</u>,'
    text3 = f'–ë–ª–∞–≥–æ–¥–∞—Ä—é, –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª(–∞). –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å —Å –æ—Ñ—Ñ–µ—Ä–æ–º –∏ –≤–µ—Ä–Ω—É—Å—å –∫ –≤–∞–º <u>–¥–æ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏/–¥–∞—Ç–∞</u>. –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–æ –º–Ω–æ–π —Ö–æ—Ä–æ—à–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –±—É–¥–µ–º –Ω–∞ —Å–≤—è–∑–∏!'
    await query.message.edit_text(f'{text1}\n\n<i>{text2}\n\n{text3}</i>\n\n', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="next5_alt")
async def negotiations6(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next4"),
    )
    text1 = f'‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ñ—Ñ–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—è—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è (24/48/72 —á–∞—Å–∞), –∞ –≤—ã –Ω–µ –≥–æ—Ç–æ–≤—ã —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ/–∂–¥–µ—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π. –ù–µ –≤–µ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –Ω–∞–¥–∞–≤–∏—Ç—å –∏ –ø–æ—Å–∫–æ—Ä–µ–µ –∑–∞–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç HR –≤ —Ç–∞–∫–æ–º –∫–ª—é—á–µ:'
    text2 = f'"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <u>–∏–º—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞</u>,\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—é, –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª(–∞). –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –≤ —Ç–∞–∫–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫/–∑–∞ 24-48-72 —á–∞—Å–∞/1 –¥–µ–Ω—å/2 –¥–Ω—è —è –Ω–µ –∏–º–µ—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –µ—â–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–µ–¥–µ–ª—é. –ú–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.'
    text3 = f'–ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º, —á—Ç–æ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏—Ö –æ–ø—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º:'
    text4 = f'–û—á–µ–Ω—å –∂–∞–ª—å, –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è, –ø—Ä–æ–µ–∫—Ç –∏ –∫–æ–º–∞–Ω–¥–∞. –†–µ—à–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –¥–ª—è –º–µ–Ω—è –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ —è –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É –µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞ —Ç–∞–∫–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫'
    text5 = f'–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–¥–ª—è—Ç —Å—Ä–æ–∫ –∏–ª–∏ –Ω–∞—á–Ω—É—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –ø–æ —Å—Ä–æ–∫—É. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–æ–º–ø–∞–Ω–∏—è.'
    await query.message.edit_text(f'{text1}\n\n<i>{text2}</i>\n\n{text3}\n\n<i>{text4}</i>\n\n{text5}\n\n', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="next5")
async def negotiations7(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next4"),
        types.InlineKeyboardButton(text="–î–∞ üí™", callback_data="next6"),
        types.InlineKeyboardButton(text="–ù–µ—Ç üëé", callback_data="next5_no"),
    )
    await query.message.edit_text('üí∞ –í–∞–º —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Ñ—Ñ–µ—Ä –Ω–∞ –±–æ–ª—å—à—É—é –∑–∞—Ä–ø–ª–∞—Ç—É, '
                                  '—á–µ–º –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª–∏?', reply_markup=keyboard1)

@dp.callback_query_handler(text="next5_no")
async def negotiations8(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next5"),
        types.InlineKeyboardButton(text="–¢–∞–∫ –∏ –µ—Å—Ç—å üëç", callback_data="next6"),
        types.InlineKeyboardButton(text="–ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫ üëé", callback_data="next5_no_again"),
    )
    await query.message.edit_text('üíµ –í–∞–º —Å–¥–µ–ª–∞–ª–∏ —Ö–æ—Ä–æ—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Ñ—Ñ–µ—Ä –Ω–∞ —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É?', reply_markup=keyboard1)

@dp.callback_query_handler(text="next5_no_again")
async def negotiations9(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next5_no"),
        types.InlineKeyboardButton(text="–î–∞ üóø", callback_data="next6_alt"),
    )
    await query.message.edit_text('üí∏ –í–∞–º —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∏–∑–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π?', reply_markup=keyboard1)

@dp.callback_query_handler(text="next6")
async def negotiations10(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next5"),
        types.InlineKeyboardButton(text="–°–æ–≥–ª–∞—à—É—Å—å –Ω–∞ –æ—Ñ—Ñ–µ—Ä ü§ù", callback_data="next7"),
        types.InlineKeyboardButton(text="–ü–æ–ø—ã—Ç–∞—é –µ—â–µ —É–¥–∞—á—É üçÄ", callback_data="next7_alt1"),
    )
    await query.message.edit_text('ü§î –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è, –≤—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ —Ç–æ, —á—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä –≤—Å–µ–≥–¥–∞ '
                                  '–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π - –æ–±–¥—É–º–∞–π—Ç–µ –∏  —Ä–µ—à–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–Ω—è—Ç—å '
                                  '—Å—É–º–º—É - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ!', reply_markup=keyboard1)


@dp.callback_query_handler(text="next7")
async def negotiations11(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next6"),
    )
    await query.message.edit_text('üë©‚Äçüíª –û–∫, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏! üë®‚Äçüíª', reply_markup=keyboard1)

@dp.callback_query_handler(text="next7_alt1")
async def negotiations12(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next6"),
    )
    text1 = f'üöÄ –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è(–ª–∞—Å—å) —Å –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. –î–æ–ª–∂–µ–Ω(–∞) –ø—Ä–∏–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ. –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è/–ø—Ä–æ–µ–∫—Ç/–∫–æ–º–∞–Ω–¥–∞ –∏ —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ —Å –≤–∞–º–∏.'
    text2 = f'1. –ü–æ–¥–Ω–∏–º–∞–µ–º —Å—É–º–º—É'
    text3 = f'–û–¥–Ω–∞–∫–æ –Ω–∞ –¥–Ω—è—Ö —É –º–µ–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –∏ —è –ø–æ–ª—É—á–∏–ª(–∞) –æ—Ñ—Ñ–µ—Ä –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã. –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ (—Å—É–º–º–∞).'
    text4 = f'2. –£–ª—É—á—à–∞–µ–º —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç'
    text5 = f'–û–¥–Ω–∞–∫–æ —è —Ö–æ—Ç–µ–ª(–∞) –±—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (—Ä–∞–±–æ—Ç—ã –≤ –æ—Ñ–∏—Å–µ), –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –î–ú–° —Å–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–µ–π <u>(–ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã)</u>. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Å—É–¥–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞?"'
    await query.message.edit_text(f'<i>{text1}</i>\n\n<b>{text2}</b>\n<i>{text3}</i>\n\n<b>{text4}</b>\n<i>{text5}</i>', parse_mode="HTML", reply_markup=keyboard1)


@dp.callback_query_handler(text="next6_alt")
async def negotiations13(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next5_no_again"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="next7_alt"),
    )
    await query.message.edit_text('‚õîÔ∏è –ù–µ —Å–æ–≥–ª–∞—à–∞–π—Ç–µ—Å—å, –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞–≤ –ø–æ–¥–Ω—è—Ç—å —Å—É–º–º—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç—á–∞—è–ª–∏—Å—å –∏ —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ—Ñ—Ñ–µ—Ä–æ–º. –°–∞–º–æ–µ —Å—Ç—Ä–∞—à–Ω–æ–µ, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –≤—ã –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ - —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏—Ç, —á—Ç–æ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ñ—Ñ–µ—Ä –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.', reply_markup=keyboard1)

@dp.callback_query_handler(text="next7_alt")
async def negotiations14(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="next6_alt"),
    )
    text1 = 'üöÄ –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è(–ª–∞—Å—å) —Å –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º. –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è/–ø—Ä–æ–µ–∫—Ç/–∫–æ–º–∞–Ω–¥–∞ –∏ —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ —Å –≤–∞–º–∏, –æ–¥–Ω–∞–∫–æ –º–µ–Ω—è —Å–º—É—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã. –í –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è –≤–µ–¥—É –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º\–ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–æ (—Å—É–º–º–∞).'
    await query.message.edit_text(f'<i>{text1}</i>', parse_mode="HTML", reply_markup=keyboard1)


######################################## Track 2 ########################################

@dp.callback_query_handler(text="job")
async def jobs(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(text='HR —Å–∞–º–∞ –Ω–∞–ø–∏—Å–∞–ª–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è', callback_data='then1'),
        types.InlineKeyboardButton(text='–í—ã —Å–∞–º–∏ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–∫–∞–∑', callback_data="then1_alt"),
        types.InlineKeyboardButton(text='–í—ã —Å–∞–º–∏ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ', callback_data="then2")
    )
    text1 = f'üèÅ –í—ã –≤—ã–ª–æ–∂–∏–ª–∏ —Ä–µ–∑—é–º–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ –Ω–∞ HH\Habr Career –∏ –ø—Ä.'
    text2 = f'‚ÄºÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ + –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–µ–∑—é–º–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º!'
    await query.message.edit_text(f'{text1}\n\n<b>{text2}</b>', parse_mode="HTML", reply_markup=keyboard1)


@dp.callback_query_handler(text="then1")
async def jobs1(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="job"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="then2"),
    )
    await query.message.edit_text(f'ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–∑—é–º–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! ', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="then1_alt")
async def jobs2(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="job"),
    )
    text1 = f'–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ HR –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ª–∞–∂–∏–≤–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –ø–µ—Ä–≤–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä:'
    text2 = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <u>(–ò–º—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞)</u>.\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—é –í–∞—Å –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ–µ –∫ –º–æ–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–µ. –ë—É–¥—É —Ä–∞–¥(–∞) –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, <u>(–í–∞—à–µ –∏–º—è)</u>.'
    await query.message.edit_text(f'{text1}\n\n<i>{text2}</i>', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="then2")
async def jobs3(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="job"),
        types.InlineKeyboardButton(text="–ù–µ—Ç üëé", callback_data="then3_no"),
        types.InlineKeyboardButton(text="–î–∞ üëç", callback_data="then3_yes"),
        types.InlineKeyboardButton(text="–í –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –ó–ü", callback_data="salary"),
    )
    await query.message.edit_text(f'üéâ –£—Ä–∞! –í–∞—Å –∑–∞–º–µ—Ç–∏–ª–∏!\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏?', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="salary")
async def jobs4(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="then2"),
        types.InlineKeyboardButton(text="–ù–µ—Ç üëé", callback_data="salary_no"),
        types.InlineKeyboardButton(text="–î–∞ üëç", callback_data="salary_yes"),
    )
    await query.message.edit_text(f'–£ –≤–∞—Å –µ—Å—Ç—å –æ—Ñ—Ñ–µ—Ä?', reply_markup=keyboard1)

@dp.callback_query_handler(text="salary_yes")
async def jobs5(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="salary"),
    )
    text1 = f'–ö–∞–∫ —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏?'
    text2 = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <u>(–ò–º—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞)</u>.\n' \
            f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è\(–ª–∞—Å—å) —Å —É—Å–ª–æ–≤–∏—è–º–∏, –≥–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.\n\n' \
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞ (–Ω–∞ —Ä—É–∫–∏) –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏?\n' \
            f'–î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ —è —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ö–æ—á—É –ø–æ–Ω–∏–º–∞—Ç—å –µ—Å—Ç—å –ª–∏ —Å–º—ã—Å–ª –º–µ–Ω—è—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –Ω–µ—Ç.\n\n' \
            f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n' \
            f'–° —É–≤–∞–∂–µ–Ω–∏–µ–º, <u>(–í–∞—à–µ –∏–º—è)</u>.'
    await query.message.edit_text(f'<b>{text1}</b>\n\n<i>{text2}</i>', parse_mode="HTML", reply_markup=keyboard1)

@dp.callback_query_handler(text="salary_no")
async def jobs5(query: types.CallbackQuery):
    logging.info(f'{query.message.from_user.full_name}: {query.message.text}')
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="salary"),
    )
    text1 = f'–ö–∞–∫ —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏?'
    text2 = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <u>(–ò–º—è HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞)</u>.\n' \
            f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è\(–ª–∞—Å—å) —Å —É—Å–ª–æ–≤–∏—è–º–∏, –≥–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.\n\n' \
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–ª–∞–¥–∞ (–Ω–∞ —Ä—É–∫–∏) –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏?\n' \
            f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n' \
            f'–° —É–≤–∞–∂–µ–Ω–∏–µ–º, <u>(–í–∞—à–µ –∏–º—è)</u>.'
    await query.message.edit_text(f'<b>{text1}</b>\n\n<i>{text2}</i>', parse_mode="HTML", reply_markup=keyboard1)










@dp.message_handler()
async def echo(message: types.Message):
    logging.info(f'{message.from_user.id} {message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç ü•∏, –ø–æ–ø—Ä–æ–±—É–π –∫–Ω–æ–ø–∫–æ–π')


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
