import os
import logging
from aiogram import Dispatcher, Bot, executor, types


logging.basicConfig(level=logging.INFO,
                    filename='logfile.log',
                    format='%(asctime)s: %(message)s',
                    datefmt='%H:%M:%S')

# TOKEN = os.getenv('TOKEN')
TOKEN = '5865671919:AAGRIya9qE9f_IoBsu6Qu-geMnD_QZ9h6YU'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

kb = [
    [
        types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç—Ä—ç–∫"),
        types.KeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É"),
        types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é"),
        types.KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—É—á—É")
    ],
]
keyboard = types.ReplyKeyboardMarkup(
    keyboard=kb,
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
)

@dp.message_handler(commands=['start'])
@dp.message_handler(lambda message: message.text == "–í –Ω–∞—á–∞–ª–æ")
async def starter(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    # await bot.send_message(message.from_id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! '
    #                                         f'–ú–µ–Ω—è –∑–æ–≤—É—Ç Elbrus Career Bot! üí´')
    await bot.send_photo(message.from_id, photo=open('static/start.jpg', 'rb'))
    await message.answer("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)



@dp.message_handler(lambda message: message.text == "–°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, f'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –°–µ–π—á–∞—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª—ã üèÉüèª')
    job = 'static/job.pdf'
    negotiation = 'static/negotiation.pdf'
    await bot.send_document(message.from_id, document=open(job, 'rb'))
    await bot.send_document(message.from_id, document=open(negotiation, 'rb'))
    await bot.send_message(message.from_id, text="üö®üö®üö® *[–°—Å—ã–ª–∫–∞ –Ω–∞ miro](https://miro.com/app/board/uXjVP4s6vpQ=/)*", parse_mode='MarkdownV2')
    await message.answer("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?", reply_markup=keyboard)



@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é")
async def motivation(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, "–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –í–æ—Ç —Ç–µ–±–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∏–Ω–≥–≤–∏–Ω üêß")
    await bot.send_animation(message.from_id, animation='https://media2.giphy.com/media/OZbGrdp7FiDiE/giphy.gif')
    await message.answer("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?", reply_markup=keyboard)



@dp.message_handler(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—É—á—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, "–ù–∞–¥—è –ö—Ä—É—Ç–∏–∫–æ–≤–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–Ω–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç!")
    await bot.send_message(message.from_id, text="‚ù§Ô∏è *[–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ù–∞–¥–∏](https://t.me/krutikovanad)* ‚ù§Ô∏è", parse_mode='MarkdownV2')





start_text = "–¢–µ—Å—Ç"

@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —Ç—Ä—ç–∫")
async def track(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    start_keyboard = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º", callback_data="negotiation"),
        types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã", callback_data="job")
    )
    await message.answer("–ö–∞–∫–æ–π —Ç—Ä—ç–∫ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?", reply_markup=start_keyboard)


@dp.callback_query_handler(text="negotiation")
async def negotiations(query: types.CallbackQuery):
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next1")
    )
    await query.message.edit_text('–í–∞–º –∑–≤–æ–Ω–∏—Ç/–ø–∏—à–µ—Ç HR  –∏ —Å–æ–æ–±—â–∞–µ—Ç, '
                                  '—á—Ç–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –æ—Ñ—Ñ–µ—Ä!', reply_markup=keyboard1)


@dp.callback_query_handler(text="next1")
async def negotiations(query: types.CallbackQuery):
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="negotiation"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next2"),
    )
    await query.message.edit_text('–ó–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ, —á—Ç–æ HR —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É/—Å—Ä–∞–≤–Ω–∏—Ç–µ '
                                  '—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –≤–∞–∫–∞–Ω—Å–∏–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç '
                                  '–Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –≤ –≤–∞–∫–∞–Ω—Å–∏–∏, —Ç–æ, —á—Ç–æ '
                                  '–æ–∑–≤—É—á–∏–ª/–Ω–∞–ø–∏—Å–∞–ª  HR  –∏–º–µ–µ—Ç –±–æ–ª—å—à—É—é —Å–∏–ª—É.', reply_markup=keyboard1)

@dp.callback_query_handler(text="next2")
async def negotiations(query: types.CallbackQuery):
    keyboard1 = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="next1"),
        types.InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="next3"),
    )
    await query.message.edit_text(''
                                  '–ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å—Ä–∞–∑—É –∂–µ "–¥–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω", '
                                  '–ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã—Å–ª–∞—Ç—å –æ—Ñ—Ñ–µ—Ä –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–º –≤–∏–¥–µ, '
                                  '—á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ '
                                  '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π', reply_markup=keyboard1)







@dp.message_handler()
async def echo(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –∫–Ω–æ–ø–∫–æ–π')


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
