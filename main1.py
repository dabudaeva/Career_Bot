import os
import logging
from aiogram import Dispatcher, Bot, executor, types

from buttons import kb, keyboard, keyboard1, markup5
logging.basicConfig(level=logging.INFO,
                    filename='logfile.log',
                    format='%(asctime)s: %(message)s',
                    datefmt='%H:%M:%S')

# TOKEN = os.getenv('TOKEN')
TOKEN = '5522470947:AAH8E3dr59tGtaxt1iw5nH0Rvyg5z0BM8gY'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

# @dp.message_handler(commands=['start'])
# async def starter(message: types.Message):
#     logging.info(f'{message.from_user.full_name}: {message.text}')
#     # await bot.send_photo(message.from_id, photo=open('static/start.jpg', 'rb'))
#     await message.reply("–ü—è—Ç–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫",
#                         reply_markup=kb.markup5)
#     # await message.answer("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup5)

import buttons as kb

@dp.message_handler(commands=['start'])
async def process_hi5_command(message: types.Message):
    await bot.send_photo(message.from_id, photo=open('static/start.jpg', 'rb'))
    # await message.reply("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?",
                        # reply_markup=kb.markup5)
    await message.answer("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb.markup5)
@dp.message_handler(lambda message: message.text == "–°–∫–∞—á–∞—Ç—å —Å—Ö–µ–º—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, f'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –°–µ–π—á–∞—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª—ã üèÉüèª')
    job = 'static/job.pdf'
    negotiation = 'static/negotiation.pdf'
    await bot.send_document(message.from_id, document=open(job, 'rb'))
    await bot.send_document(message.from_id, document=open(negotiation, 'rb'))
    await bot.send_message(message.from_id, text="üö®üö®üö® *[–°—Å—ã–ª–∫–∞ –Ω–∞ miro](https://miro.com/app/board/uXjVP4s6vpQ=/)*", parse_mode='MarkdownV2')
  
    await message.answer("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é")
async def motivation(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, "–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! –í–æ—Ç —Ç–µ–±–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–∏–Ω–≥–≤–∏–Ω üêß")
    await bot.send_animation(message.from_id, animation='https://media2.giphy.com/media/OZbGrdp7FiDiE/giphy.gif')
    await message.answer("–ú–æ–≥—É —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?", reply_markup=kb.markup5)
@dp.message_handler(commands=["test"])
async def any_message(message: types.Message):
    await message.answer("Hello, <b>world</b>!", parse_mode="HTML")
    await message.answer("Hello, *world*\!", parse_mode="MarkdownV2")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å <u>HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π</u>", parse_mode="HTML")

@dp.message_handler(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ—É—á—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_photo(message.from_id, photo=open('static/couch.png', 'rb'), 
    caption='–ù–∞–¥—è –ö—Ä—É—Ç–∏–∫–æ–≤–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–Ω–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç!')
    
    await message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=keyboard1)

@dp.message_handler(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É")
async def pdf(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, "–ù–∞–¥—è –ö—Ä—É—Ç–∏–∫–æ–≤–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–Ω–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–º–æ–∂–µ—Ç!")
    await bot.send_message(message.from_id, text="‚ù§Ô∏è *[–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ù–∞–¥–∏](https://t.me/krutikovanad)* ‚ù§Ô∏è", parse_mode='MarkdownV2')
    await message.answer("–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=kb.markup5)

@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —Ç—Ä—ç–∫")
async def track(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, f'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!')
    await message.answer("–ö–∞–∫–æ–π —Ç—Ä—ç–∫ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?", reply_markup=kb.markup5)


@dp.message_handler()
async def echo(message: types.Message):
    logging.info(f'{message.from_user.full_name}: {message.text}')
    await bot.send_message(message.from_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –∫–Ω–æ–ø–∫–æ–π')


executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
